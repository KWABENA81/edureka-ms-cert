server:
  port: 8095

  error:
    whitelabel:
      enabled: false

spring:
  application:
    name: bookms

  h2:
    console:
      enabled: true
      path: "/h2-console"
      settings:
        trace: false
        web-allow-others: false

  datasource:
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:bookdb
    username: sa
    password: password

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    show-sql: true
    open-in-view: true
    properties:
      hibernate:
        format_sql: true

  mvc:
    pathmatch:
      matching-strategy:  ant_path_matcher

  security:
    enabled: true
    user:
      name: Edureka
      password: password  #$2b$12$tcoaaq3PeqkerTb8OS2t5eTBKZFzrnFPJy.s1Fk8OcIZg0aQvUyeq
      roles: USER, ADMIN

    oauth2:
      resource-server:
        jwt:
          issuer-uri: https://idp.example.com/issuer
          jwk-set-uri: https://idp.example.com/.well-known/jwks.json

#spring:
  # devtools:
  #   add-properties: false
#  security:
#    enabled: true
#    user:
#      name: Edureka
#      password: password
#      roles: USER, ADMIN
#    oauth2:
#      resource-server:
#        jwt:
#          issuer-uri: "https://api.asgardeo.io/t/imeshaorg/oauth2/token"


#    enabled: false
##spring:
#  autoconfigure:
#    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
#spring.
#  autoconfigure:
#    exclude: org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration

app:
  security:
    cors:
      origin: http://localhost:3000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    #service-url:
      #defaultZone: http://localhost:8761/eureka/
      #defaultZone: http://host.docker.internal:8761/eureka/
      #defaultZone: http://eureka-server:8761/eureka/
      #defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
    #healthcheck:
      #enabled: true
  instance:
    preferIpAddress: false
    hostname: localhost

# info endpoints configuration
info:
  app:
    name: ${project.name}
    description: ${project.description}
    version: ${project.version}
    encoding: ${project.build.sourceEncoding}
    java:
      version: ${java.version}

# logging
logging:
  file:
    path: tmp/log

management:
  endpoint:
    shutdown:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: always
      
  endpoints:
    web:
      exposure:
        include: prometheus, health, info, mappings, env, auditevents, shutdown, *





  # Actuator endpoints for Circuit Breaker
  #management:    health:      circuitbreakers:        enabled: true
  #management.endpoints.web.exposure.include=health
  #management.endpoint.health.show-details=always

  # Security enable/disable
  #security:
  #  ignored: /**
  #  basic:
  #    enabled: false

  ####